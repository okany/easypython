# This script finds the common words in two lists
class listops():
    def __init__(self, lista, listb):
        self.listA = lista
        self.listB = listb
        self.mdict = dict()
    def intersect(self):
        for item in self.listA:
            if(self.mdict.get(item) != None):
                self.mdict[item] = self.mdict[item] + 1
            else:
                self.mdict[item] = 1
        for item in self.listB:
            if(self.mdict.get(item) != None):
                print("Intersected=", item)
    def printdict(self):
        print("DICT= {}".format(self.mdict))

if __name__ == '__main__':
    lista = ["apple", "orange", "apple", "pinapple", "melon", "melon", "blueberry"]
    listb = ["raspbery", "apple", "pinapple", "watermelon", "banana"]

    lo1 = listops(lista, listb)
    lo1.intersect()
    lo1.printdict()

    str1 = "In this study we used domain engineering as a method for gaining deeper formal understanding of a class of algorithms. Specifically, we analyzed 6 stemming algorithms from 4 different sub-domains of the conflation algorithms domain and developed formal domain models and generators based on these models. The application generator produces source code for not only affix removal but also successor variety, table lookup, and n-gram stemmers. The performance of the generated stemmers was compared with the stemmers developed manually in terms of stem similarity, source, and executable sizes, and development and execution times. Five of the stemmers generated by the application generator produced more than 99.9% identical stems with the manually developed stemmers. Some of the generated stemmers were as efficient as their manual equivalents and some were not."
    str2 = "In the early 1980s software companies started the systematic reuse process through domain engineering to improve software productivity and quality. There has been insufficient empirical study of the domain engineering process and domain products such as reusable components and generators. This paper addresses this problem by documenting and empirically evaluating a domain engineering project for the conflation algorithms domain. This domain is important for many types of systems such as information retrieval systems, search engines, and word processors. The application generator developed for this study extends the domain scope compared to previous ones."

    lo2 = listops(str1.split(), str2.split())
    lo2.intersect()
    lo2.printdict()
